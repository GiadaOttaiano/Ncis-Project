import eventlet
eventlet.monkey_patch()

from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.ofproto import ofproto_v1_3
from ryu.lib.packet import packet
from ryu.lib.packet import ethernet
from ryu.lib.packet import ether_types
import time
import collections

class PortStatsCollector:
    def __init__(self):
        self.port_stats = collections.defaultdict(lambda: collections.defaultdict(dict))
        self.last_stats = collections.defaultdict(lambda: collections.defaultdict(dict))

    def update_stats(self, dpid, port_no, stat):
        self.port_stats[dpid][port_no] = {
            'rx_packets': stat.rx_packets,
            'tx_packets': stat.tx_packets,
            'rx_bytes': stat.rx_bytes,
            'tx_bytes': stat.tx_bytes
        }
        self.calculate_throughput(dpid, port_no, stat)

    def calculate_throughput(self, dpid, port_no, stat):
        last = self.last_stats[dpid].get(port_no, None)
        if last:
            # Calculate throughput as (new - old) / interval
            interval = 10  # polling interval in seconds
            rx_throughput = (stat.rx_bytes - last['rx_bytes']) / interval
            tx_throughput = (stat.tx_bytes - last['tx_bytes']) / interval

            print(f"Switch {dpid}, Port {port_no}:")
            print(f"  RX Throughput: {rx_throughput:.2f} bytes/sec")
            print(f"  TX Throughput: {tx_throughput:.2f} bytes/sec")

        self.last_stats[dpid][port_no] = {
            'rx_packets': stat.rx_packets,
            'tx_packets': stat.tx_packets,
            'rx_bytes': stat.rx_bytes,
            'tx_bytes': stat.tx_bytes
        }

class SimpleSwitch13(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]

    def __init__(self, *args, **kwargs):
        super(SimpleSwitch13, self).__init__(*args, **kwargs)
        self.mac_to_port = {}
        self.port_stats_collector = PortStatsCollector()
        self.dpid_to_datapath = {}
        self.poll_interval = 10  # Polling interval in seconds
        self._start_port_stats_polling()

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        self.dpid_to_datapath[datapath.id] = datapath

        # Install table-miss flow entry
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER, ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

        # Request initial stats for all ports
        self.request_port_stats(datapath)

    def add_flow(self, datapath, priority, match, actions, buffer_id=None):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        if buffer_id:
            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,
                                    priority=priority, match=match,
                                    instructions=inst)
        else:
            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,
                                    match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def _packet_in_handler(self, ev):
        if ev.msg.msg_len < ev.msg.total_len:
            self.logger.debug("Packet truncated: only %s of %s bytes", ev.msg.msg_len, ev.msg.total_len)
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        in_port = msg.match['in_port']

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocols(ethernet.ethernet)[0]

        if eth.ethertype == ether_types.ETH_TYPE_LLDP:
            return
        dst = eth.dst
        src = eth.src

        dpid = datapath.id
        self.mac_to_port.setdefault(dpid, {})

        self.logger.info(f"Packet in: switch={dpid}, src={src}, dst={dst}, in_port={in_port}")

        # Learn a mac address to avoid FLOOD next time.
        self.mac_to_port[dpid][src] = in_port

        if dst in self.mac_to_port[dpid]:
            out_port = self.mac_to_port[dpid][dst]
        else:
            out_port = ofproto.OFPP_FLOOD

        actions = [parser.OFPActionOutput(out_port)]

        # Install a flow to avoid packet_in next time
        if out_port != ofproto.OFPP_FLOOD:
            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)
            if msg.buffer_id != ofproto.OFP_NO_BUFFER:
                self.add_flow(datapath, 1, match, actions, msg.buffer_id)
                return
            else:
                self.add_flow(datapath, 1, match, actions)
        data = None
        if msg.buffer_id == ofproto.OFP_NO_BUFFER:
            data = msg.data

        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,
                                  in_port=in_port, actions=actions, data=data)
        datapath.send_msg(out)

    def request_port_stats(self, datapath):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_ANY)
        datapath.send_msg(req)

    def _start_port_stats_polling(self):
        # Use eventlet.spawn to run the polling method in the background
        eventlet.spawn(self._periodic_port_stats_polling)

    def _periodic_port_stats_polling(self):
        while True:
            time.sleep(self.poll_interval)
            for dpid, datapath in self.dpid_to_datapath.items():
                self.request_port_stats(datapath)

    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def _port_stats_reply_handler(self, ev):
        datapath = ev.msg.datapath
        body = ev.msg.body

        for stat in body:
            dpid = datapath.id
            port_no = stat.port_no
            self.port_stats_collector.update_stats(dpid, port_no, stat)
